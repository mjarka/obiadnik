{"version":3,"sources":["Appbar.js","constants.js","CategoriesDialog.js","RemoveDialog.js","Products.js","ProductDialog.js","Recipes.js","Theme.js","Calendar.js","BasketRecipes.js","BasketCategories.js","Basket.js","Apollotest.js","App.js","reportWebVitals.js","index.js"],"names":["Appbar","AppBar","position","Toolbar","Typography","variant","Hidden","xsDown","Button","color","component","RouterLink","to","smUp","IconButton","aria-label","fontSize","productsQuery","gql","recipes","calendar","updateCalendar","products","createProduct","createCategory","createRecipe","updateRecipe","deleteRecipe","deleteProduct","updateCheckbox","CategoriesDialog","props","handleClose","onChange","name","onToggle","Dialog","open","onClose","aria-labelledby","onSubmit","event","preventDefault","onValueChange","tempCategory","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","value","target","label","type","DialogActions","onClick","RemoveDialog","isOpen","keepMounted","aria-describedby","title","onDelete","toggler","Products","classes","makeStyles","theme","divider","marginTop","spacing","marginBottom","chip","marginRight","useStyles","filter","createFilterOptions","useState","setValue","categoryName","setCategoryName","categoryId","setCategoryId","unitName","setUnitName","unitId","setUnitId","productName","setProductName","setProductId","deleteId","setDeleteId","setTempCategory","toggleOpen","isDialogOpen","setIsDialogOpen","useQuery","Constants","loading","data","error","refetch","useMutation","deleteChip","a","variables","productId","dialogToggler","Container","Grid","container","className","item","xs","sm","fullWidth","required","select","units","map","unit","MenuItem","Autocomplete","newValue","setTimeout","inputValue","filterOptions","options","params","filtered","push","categories","getOptionLabel","option","selectOnFocus","clearOnBlur","getOptionSelected","handleHomeEndKeys","renderOption","renderInput","button","endIcon","category","some","e","console","log","product","Chip","editProduct","addCategory","newcat","ProductDialog","React","year","dialogValue","setDialogValue","parseInt","Recipes","recipe","setRecipe","values","setValues","recipeName","setRecipeName","recipeDescription","setRecipeDescription","tempProducts","setTempProducts","chipRecipeId","setChipRecipeId","useEffect","Recipe","handleChipDelete","recipeId","multiline","rowsMax","disablePortal","multiple","size","disabled","graphqlValues","Object","entries","flatMap","k","productIds","length","gutterBottom","helperText","update","$set","handleProductValue","Divider","tempValues","productsQuantity","quantity","reduce","obj","assign","idArray","filteredProducts","includes","handleDisplayRecipe","createMuiTheme","palette","background","default","primary","main","Calendar","section","isSelected","handleRecipeChip","BasketRecipes","recipesList","setRecipesList","List","dense","disablePadding","subheader","ListSubheader","ListItem","role","undefined","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","checked","isTaken","indexOf","ListItemText","secondary","BasketCategories","productsArray","recipeIndex","productIndex","productCategory","productUnit","productValue","grouped","groupBy","items","key","Basket","isCategoryView","setIscategoryView","handleRecipeChange","changedProduct","itemUnit","EXCHANGE_RATES","Apollotest","App","client","ApolloClient","uri","cache","InMemoryCache","ThemeProvider","CssBaseline","basename","process","maxWidth","disableGutters","Paper","elevation","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76598e7b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\n// appbar icons\r\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\r\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\";\r\nimport ShoppingBasketIcon from \"@material-ui/icons/ShoppingBasket\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\n\r\nexport default function Appbar() {\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {/* <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton> */}\r\n          <Typography variant=\"h6\">Obiados</Typography>\r\n          <Hidden xsDown>\r\n            <Button color=\"inherit\" component={RouterLink} to=\"/products\">\r\n              Produkty\r\n            </Button>\r\n\r\n            <Button color=\"inherit\" component={RouterLink} to=\"/recipes\">\r\n              Przepisy\r\n            </Button>\r\n            <Button color=\"inherit\" component={RouterLink} to=\"/calendar\">\r\n              Kalendarz\r\n            </Button>\r\n            <Button color=\"inherit\" component={RouterLink} to=\"/basket\">\r\n              Koszyk\r\n            </Button>\r\n          </Hidden>\r\n          <Hidden smUp>\r\n            <IconButton\r\n              aria-label=\"delete\"\r\n              component={RouterLink}\r\n              color=\"inherit\"\r\n              to=\"/products\"\r\n            >\r\n              <FastfoodIcon fontSize=\"small\" />\r\n            </IconButton>\r\n\r\n            <IconButton\r\n              aria-label=\"delete\"\r\n              component={RouterLink}\r\n              color=\"inherit\"\r\n              to=\"/recipes\"\r\n            >\r\n              <MenuBookIcon fontSize=\"small\" />\r\n            </IconButton>\r\n            <IconButton\r\n              aria-label=\"delete\"\r\n              component={RouterLink}\r\n              color=\"inherit\"\r\n              to=\"/calendar\"\r\n            >\r\n              <DateRangeIcon fontSize=\"small\" />\r\n            </IconButton>\r\n            <IconButton\r\n              aria-label=\"delete\"\r\n              component={RouterLink}\r\n              color=\"inherit\"\r\n              to=\"/basket\"\r\n            >\r\n              <ShoppingBasketIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Hidden>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GRAPHQL_API = \"https://obiadnik.herokuapp.com/graphql\";\r\nexport const productsQuery = gql`\r\n  query {\r\n    recipes(where: { isSelected: true }) {\r\n      name\r\n      id\r\n      productsQuantity {\r\n        isTaken\r\n        value\r\n        id\r\n        product {\r\n          id\r\n          name\r\n          unit {\r\n            id\r\n            name\r\n          }\r\n          category {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const checkboxUpdate = `  mutation ($recipeId:ID!,$productId:ID!, $isTaken:Boolean!) {\r\n  updateRecipe(\r\n    input: {\r\n      where: {  id:$recipeId}\r\n      data: {productsQuantity: {id: $productId, isTaken:$isTaken}}\r\n    }\r\n  ) {\r\n  recipe{\r\n    id\r\n    isSelected\r\n    productsQuantity {\r\n      isTaken   \r\n      id\r\n    }\r\n  }\r\n}\r\n}\r\n`;\r\nexport const recipes = gql`\r\n  query {\r\n    products {\r\n      name\r\n      id\r\n      unit {\r\n        id\r\n        name\r\n      }\r\n    }\r\n    recipes {\r\n      id\r\n      name\r\n      Recipe\r\n      productsQuantity {\r\n        product {\r\n          name\r\n          id\r\n          unit {\r\n            name\r\n            id\r\n          }\r\n        }\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const calendar = gql`\r\n  query {\r\n    recipes {\r\n      id\r\n      name\r\n      isSelected\r\n    }\r\n  }\r\n`;\r\nexport const updateCalendar = gql`\r\n  mutation ($recipeId: ID!, $isSelected: Boolean!) {\r\n    updateRecipe(\r\n      input: { where: { id: $recipeId }, data: { isSelected: $isSelected } }\r\n    ) {\r\n      recipe {\r\n        id\r\n        name\r\n        isSelected\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const products = gql`\r\n  query {\r\n    products {\r\n      name\r\n      id\r\n      unit {\r\n        name\r\n        id\r\n      }\r\n      category {\r\n        name\r\n        id\r\n      }\r\n    }\r\n    units {\r\n      name\r\n      id\r\n    }\r\n    categories {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\nexport const createProduct = gql`\r\n  mutation ($name: String!, $unit: ID!, $category: ID!) {\r\n    createProduct(\r\n      input: { data: { name: $name, unit: $unit, category: $category } }\r\n    ) {\r\n      product {\r\n        name\r\n        id\r\n        unit {\r\n          name\r\n          id\r\n        }\r\n        category {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createCategory = gql`\r\n  mutation ($categoryName: String!) {\r\n    createCategory(input: { data: { name: $categoryName } }) {\r\n      category {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createRecipe = gql`\r\n  mutation (\r\n    $recipeName: String!\r\n    $recipeDescription: String!\r\n    $productIds: [ComponentProductsProductsQuantityInput!]\r\n  ) {\r\n    createRecipe(\r\n      input: {\r\n        data: {\r\n          Recipe: $recipeDescription\r\n          name: $recipeName\r\n          productsQuantity: $productIds\r\n        }\r\n      }\r\n    ) {\r\n      recipe {\r\n        id\r\n        Recipe\r\n        name\r\n        productsQuantity {\r\n          id\r\n          product {\r\n            id\r\n          }\r\n          value\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const updateRecipe = gql`\r\n  mutation (\r\n    $recipeId: ID!\r\n    $recipeName: String!\r\n    $recipeDescription: String!\r\n    $productIds: [editComponentProductsProductsQuantityInput!]\r\n  ) {\r\n    updateRecipe(\r\n      input: {\r\n        where: { id: $recipeId }\r\n        data: {\r\n          Recipe: $recipeDescription\r\n          name: $recipeName\r\n          productsQuantity: $productIds\r\n        }\r\n      }\r\n    ) {\r\n      recipe {\r\n        id\r\n        Recipe\r\n        name\r\n        productsQuantity {\r\n          id\r\n          product {\r\n            id\r\n          }\r\n          value\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteRecipe = gql`\r\n  mutation ($recipeId: ID!) {\r\n    deleteRecipe(input: { where: { id: $recipeId } }) {\r\n      recipe {\r\n        id\r\n        name\r\n        Recipe\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteProduct = gql`\r\n  mutation ($productId: ID!) {\r\n    deleteProduct(input: { where: { id: $productId } }) {\r\n      product {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const updateCheckbox = gql`\r\n  mutation (\r\n    $recipeId: ID!\r\n    $productIds: [editComponentProductsProductsQuantityInput!]\r\n  ) {\r\n    updateRecipe(\r\n      input: {\r\n        where: { id: $recipeId }\r\n        data: { productsQuantity: $productIds }\r\n      }\r\n    ) {\r\n      recipe {\r\n        id\r\n        Recipe\r\n        name\r\n        productsQuantity {\r\n          id\r\n          isTaken\r\n          product {\r\n            id\r\n          }\r\n          value\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default function CategoriesDialog(props) {\r\n  const handleCategoryAdd = (event) => {\r\n    event.preventDefault();\r\n    props.onValueChange({\r\n      name: props.tempCategory.name,\r\n      color: \"Test\",\r\n    });\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    props.onChange({\r\n      name: \"\",\r\n      color: \"\",\r\n    });\r\n\r\n    props.onToggle(false);\r\n  };\r\n  return (\r\n    <Dialog\r\n      open={props.open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <form onSubmit={handleCategoryAdd}>\r\n        <DialogTitle id=\"form-dialog-title\">Dodaj kategorię</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Brakuje kategorii? Dodaj ją tutaj\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            value={props.tempCategory.name}\r\n            onChange={(event) =>\r\n              props.onChange({\r\n                ...props.tempCategory,\r\n                name: event.target.value,\r\n              })\r\n            }\r\n            label=\"nazwa\"\r\n            type=\"text\"\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            value={props.tempCategory.color}\r\n            onChange={(event) =>\r\n              props.onChange({\r\n                ...props.tempCategory,\r\n                color: event.target.value,\r\n              })\r\n            }\r\n            label=\"kolor\"\r\n            type=\"string\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button type=\"submit\" color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogContentText,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default function RemoveDialog(props) {\r\n  return (\r\n    <Dialog\r\n      open={props.isOpen}\r\n      //   TransitionComponent={Transition}\r\n      keepMounted\r\n      //   onClose={handleClose}\r\n      aria-labelledby=\"alert-dialog-slide-title\"\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-slide-title\">{props.title}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-slide-description\">\r\n          Ta akcja jest nieodwracalna. Nie będziesz płakać?\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={props.onDelete}>\r\n          Usuń\r\n        </Button>\r\n        <Button color=\"primary\" onClick={props.toggler}>\r\n          Anuluj\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Chip, Container, TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport * as Constants from \"./constants\";\r\nimport { useQuery, gql, useMutation } from \"@apollo/client\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Autocomplete, {\r\n  createFilterOptions,\r\n} from \"@material-ui/lab/Autocomplete\";\r\nimport CategoriesDialog from \"./CategoriesDialog\";\r\nimport RemoveDialog from \"./RemoveDialog\";\r\n\r\nexport default function Products() {\r\n  //\r\n  //    STYLES\r\n  //\r\n  const useStyles = makeStyles((theme) => ({\r\n    divider: {\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(3),\r\n    },\r\n    chip: {\r\n      marginRight: theme.spacing(1),\r\n      marginBottom: theme.spacing(1),\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  //\r\n  //    States\r\n  //\r\n  const filter = createFilterOptions();\r\n  const [value, setValue] = useState(null);\r\n\r\n  const [categoryName, setCategoryName] = useState(\"\");\r\n  const [categoryId, setCategoryId] = useState(\"1\");\r\n  const [unitName, setUnitName] = useState(\"\");\r\n  const [unitId, setUnitId] = useState(\"1\");\r\n  const [productName, setProductName] = useState([]);\r\n  const [productId, setProductId] = useState([]);\r\n  const [deleteId, setDeleteId] = useState();\r\n  const [products, setProducts] = useState([]);\r\n  const [tempCategory, setTempCategory] = useState({\r\n    name: \"\",\r\n    color: \"\",\r\n  });\r\n  const [open, toggleOpen] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  //\r\n  //    graphql\r\n  //\r\n  const { loading, error, data, refetch } = useQuery(Constants.products);\r\n  const [createProduct] = useMutation(Constants.createProduct);\r\n  const [createCategory] = useMutation(Constants.createCategory);\r\n  const [deleteProduct] = useMutation(Constants.deleteProduct);\r\n  if (loading) return \"Loading...\";\r\n  //\r\n  //    functions\r\n  //\r\n\r\n  // delete chip when \"x\" is clicked\r\n  const handleDelete = (id) => {\r\n    dialogToggler();\r\n    setDeleteId(id);\r\n  };\r\n  const deleteChip = async () => {\r\n    await deleteProduct({\r\n      variables: {\r\n        productId: deleteId,\r\n      },\r\n    });\r\n    dialogToggler();\r\n    await refetch();\r\n    setCategoryName(\"\");\r\n    setProductName(\"\");\r\n    setUnitName(\"\");\r\n  };\r\n\r\n  const handleUnitIdChange = (event) => {\r\n    setUnitId(event);\r\n  };\r\n  const handleUnitChange = (event) => {\r\n    setUnitName(event.target.value);\r\n  };\r\n  const handleProductChange = (event) => {\r\n    setProductName(event.target.value);\r\n  };\r\n  const dialogToggler = () => setIsDialogOpen(!isDialogOpen);\r\n  function handleTempCategory(newValue) {\r\n    setTempCategory(newValue);\r\n  }\r\n  function onValueChange(newValue) {\r\n    setValue(newValue);\r\n    createCategory({ variables: { categoryName: newValue.name } });\r\n    refetch();\r\n  }\r\n  function onNewCategory(newcat) {}\r\n  function toggleOpenChange(newValue) {\r\n    toggleOpen(newValue);\r\n  }\r\n  // updating product values after chip is clicked\r\n  const editProduct = (product) => {\r\n    setProductName(product.name);\r\n    setProductId(product.id);\r\n    setCategoryName(product.category.name);\r\n    setUnitName(product.unit.name);\r\n  };\r\n  //\r\n  // Post entry to database\r\n  //\r\n  const handleSubmit = () => {\r\n    const variables = {\r\n      name: productName,\r\n      category: categoryId,\r\n      unit: unitId,\r\n    };\r\n    // check if name is already in database\r\n    // put to database if already exist\r\n    if (products.some((e) => e.name === productName)) {\r\n      console.log(\"już mam takie coś\");\r\n    }\r\n    // post to database if this is new entry\r\n    else {\r\n      createProduct({ variables: variables });\r\n      // Update chips after SAVE is clicked\r\n      refetch();\r\n    }\r\n  };\r\n  return (\r\n    <Container>\r\n      <Grid container spacing={3} className={classes.divider}>\r\n        <Grid item xs={12} sm={4}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            label=\"Wpisz nazwę produktu\"\r\n            fullWidth\r\n            value={productName}\r\n            onChange={handleProductChange}\r\n            required\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={4}>\r\n          <TextField\r\n            id=\"unit\"\r\n            select\r\n            label=\"Wybierz jednostkę\"\r\n            value={unitName}\r\n            fullWidth\r\n            onChange={handleUnitChange}\r\n          >\r\n            {data.units.map((unit) => (\r\n              <MenuItem\r\n                key={unit.id}\r\n                value={unit.name}\r\n                onClick={() => handleUnitIdChange(unit.id)}\r\n              >\r\n                {unit.name}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={4}>\r\n          <Autocomplete\r\n            value={categoryName}\r\n            onChange={(event, newValue) => {\r\n              if (typeof newValue === \"string\") {\r\n                // timeout to avoid instant validation of the dialog's form.\r\n                setTimeout(() => {\r\n                  toggleOpen(true);\r\n                  setTempCategory({\r\n                    name: newValue,\r\n                    color: \"wybierz kolor\",\r\n                  });\r\n                });\r\n              } else if (newValue && newValue.inputValue) {\r\n                toggleOpen(true);\r\n                setTempCategory({\r\n                  name: newValue.inputValue,\r\n                  color: \"wybierz kolor\",\r\n                });\r\n              } else {\r\n                setCategoryName(newValue.name);\r\n                setCategoryId(newValue.id);\r\n              }\r\n            }}\r\n            filterOptions={(options, params) => {\r\n              const filtered = filter(options, params);\r\n\r\n              if (params.inputValue !== \"\") {\r\n                filtered.push({\r\n                  inputValue: params.inputValue,\r\n                  name: `Dodaj \"${params.inputValue}\"`,\r\n                });\r\n              }\r\n              return filtered;\r\n            }}\r\n            id=\"wpisz kategorię\"\r\n            options={data.categories}\r\n            getOptionLabel={(option) => {\r\n              // e.g value selected with enter, right from the input\r\n              if (typeof option === \"string\") {\r\n                return option;\r\n              }\r\n              if (option.inputValue) {\r\n                return option.inputValue;\r\n              }\r\n              return option.name;\r\n            }}\r\n            selectOnFocus\r\n            clearOnBlur\r\n            getOptionSelected={(option, value) => option.name === value}\r\n            handleHomeEndKeys\r\n            renderOption={(option) => option.name}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Wybierz kategorię\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4} sm={4}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            endIcon={<SaveIcon />}\r\n            onClick={handleSubmit}\r\n          >\r\n            Zapisz\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      {/* PRODUCTS CHIPS */}\r\n\r\n      {data.products.map((product) => (\r\n        <Chip\r\n          className={classes.chip}\r\n          color={\"primary\"}\r\n          key={product.id}\r\n          variant=\"outlined\"\r\n          label={product.name}\r\n          onDelete={() => handleDelete(product.id)}\r\n          // deleteIcon={<EditIcon />}\r\n          onClick={(e) => editProduct(product, e)}\r\n        />\r\n      ))}\r\n      {/* PRODUCTS CHIPS */}\r\n\r\n      <RemoveDialog\r\n        isOpen={isDialogOpen}\r\n        toggler={dialogToggler}\r\n        onDelete={deleteChip}\r\n        title={\"Chcesz usunąć ten produkt?\"}\r\n      />\r\n      <CategoriesDialog\r\n        onChange={handleTempCategory}\r\n        tempCategory={tempCategory}\r\n        onValueChange={onValueChange}\r\n        onToggle={toggleOpenChange}\r\n        open={open}\r\n        addCategory={onNewCategory}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nexport default function ProductDialog() {\r\n  //\r\n  // STATES\r\n  //\r\n  const [value, setValue] = React.useState(null);\r\n  const [open, toggleOpen] = React.useState(false);\r\n  const [dialogValue, setDialogValue] = React.useState({\r\n    title: \"\",\r\n    year: \"\",\r\n  });\r\n  //\r\n  // HANDLES\r\n  //\r\n  const handleClose = () => {\r\n    setDialogValue({\r\n      title: \"\",\r\n      year: \"\",\r\n    });\r\n\r\n    toggleOpen(false);\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setValue({\r\n      title: dialogValue.title,\r\n      year: parseInt(dialogValue.year, 10),\r\n    });\r\n\r\n    handleClose();\r\n  };\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <form onSubmit={handleSubmit}>\r\n        <DialogTitle id=\"form-dialog-title\">Dodaj nowy produkt</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Zabrakło produktu na liście? Dodaj go!\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            value={dialogValue.title}\r\n            onChange={(event) =>\r\n              setDialogValue({ ...dialogValue, title: event.target.value })\r\n            }\r\n            label=\"Nazwa\"\r\n            type=\"text\"\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            value={dialogValue.year}\r\n            onChange={(event) =>\r\n              setDialogValue({ ...dialogValue, year: event.target.value })\r\n            }\r\n            label=\"Kategoria\"\r\n            type=\"text\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button type=\"submit\" color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport ProductDialog from \"./ProductDialog\";\r\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\r\nimport * as Constants from \"./constants\";\r\nimport update from \"immutability-helper\";\r\nimport RemoveDialog from \"./RemoveDialog\";\r\nexport default function Recipes() {\r\n  //\r\n  //    STYLES\r\n  //\r\n  const useStyles = makeStyles((theme) => ({\r\n    divider: {\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(3),\r\n    },\r\n    chip: {\r\n      marginRight: theme.spacing(1),\r\n      marginBottom: theme.spacing(1),\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  //\r\n  // STATES\r\n  //\r\n  const [recipe, setRecipe] = useState(\"\");\r\n  const [values, setValues] = useState({});\r\n  const [recipeName, setRecipeName] = useState([\"\"]);\r\n  const [recipeDescription, setRecipeDescription] = useState([\"\"]);\r\n  const [tempProducts, setTempProducts] = useState([]);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [chipRecipeId, setChipRecipeId] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setRecipeName(recipe.name);\r\n    setRecipeDescription(recipe.Recipe);\r\n  }, [recipe]);\r\n\r\n  //\r\n  //    Add graphql query\r\n  //\r\n  const { loading, error, data, refetch } = useQuery(Constants.recipes);\r\n  const [createRecipe] = useMutation(Constants.createRecipe);\r\n  const [updateRecipe] = useMutation(Constants.updateRecipe);\r\n  const [deleteRecipe] = useMutation(Constants.deleteRecipe);\r\n  if (loading) return \"Loading...\";\r\n\r\n  //\r\n  // HANDLERS\r\n  //\r\n  //\r\n\r\n  //\r\n  // Change values for  temp products\r\n  //\r\n  const handleProductValue = (product, e) => {\r\n    product.id in values\r\n      ? setValues(update(values, { [product.id]: { $set: e.target.value } }))\r\n      : setValues({ ...values, [product.id]: e.target.value });\r\n  };\r\n\r\n  // Change recipe state based on name and description input\r\n  const handleRecipeName = (event) => {\r\n    setRecipeName(event.target.value);\r\n  };\r\n  const handleRecipeDescription = (event) => {\r\n    setRecipeDescription(event.target.value);\r\n  };\r\n\r\n  // dialog opener\r\n  const handleDialog = (recipeId) => {\r\n    setIsDialogOpen(!isDialogOpen);\r\n    setChipRecipeId(recipeId);\r\n  };\r\n\r\n  // delete chip when \"x\" is clicked\r\n  const handleChipDelete = async () => {\r\n    await deleteRecipe({\r\n      variables: {\r\n        recipeId: chipRecipeId,\r\n      },\r\n    });\r\n    dialogToggler();\r\n    await refetch();\r\n  };\r\n  // Togger to open/close dialog when chip is clicked\r\n  const dialogToggler = () => setIsDialogOpen(!isDialogOpen);\r\n\r\n  //\r\n  // Display recipe when chip is clicked\r\n  //\r\n  const handleDisplayRecipe = (recipe) => {\r\n    setRecipe(recipe);\r\n\r\n    // array of  products ID's from recipe\r\n    const tempValues = recipe.productsQuantity.flatMap((quantity) => {\r\n      return { [quantity.product.id]: quantity.value };\r\n    });\r\n\r\n    setValues(tempValues.reduce((obj, item) => Object.assign(obj, item), {}));\r\n    const idArray = recipe.productsQuantity.map((quantity) => {\r\n      return quantity.product.id;\r\n    });\r\n    // filter products based on recipe products ID's\r\n    const filteredProducts = data.products.filter((product) =>\r\n      idArray.includes(product.id)\r\n    );\r\n    setTempProducts(filteredProducts);\r\n  };\r\n\r\n  // Post entry to database\r\n  //\r\n  const handleSubmit = () => {\r\n    const graphqlValues = Object.entries(values).flatMap(([k, v]) => [\r\n      { value: v, product: k },\r\n    ]);\r\n    // update or create based on name of the recipe\r\n    if (data.recipes.some((recipe) => recipe.name === recipeName)) {\r\n      updateRecipe({\r\n        variables: {\r\n          recipeId: recipe.id,\r\n          recipeName: recipeName,\r\n          recipeDescription: recipeDescription,\r\n          productIds: graphqlValues,\r\n        },\r\n      });\r\n    } else {\r\n      createRecipe({\r\n        variables: {\r\n          recipeName: recipeName,\r\n          recipeDescription: recipeDescription,\r\n          productIds: graphqlValues,\r\n        },\r\n      });\r\n    }\r\n    refetch();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ProductDialog />\r\n      <Grid container className={classes.divider} spacing={3}>\r\n        <Grid item sm={6} xs={12}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              id=\"recipeName\"\r\n              label=\"Nazwa przepisu\"\r\n              value={recipeName || \"\"}\r\n              onChange={handleRecipeName}\r\n              fullWidth\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.divider}>\r\n            <TextField\r\n              id=\"recipeDescription\"\r\n              label=\"Przepis\"\r\n              multiline\r\n              rowsMax={14}\r\n              value={recipeDescription || \"\"}\r\n              onChange={handleRecipeDescription}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.divider}>\r\n            <Autocomplete\r\n              disablePortal={true}\r\n              fullWidth\r\n              multiple\r\n              size=\"small\"\r\n              id=\"combo-box-demo\"\r\n              options={data.products}\r\n              value={tempProducts}\r\n              onChange={(event, value) => setTempProducts(value)}\r\n              getOptionLabel={(option) => option.name}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"standard\" label=\"Produkty\" />\r\n              )}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={4} sm={4}>\r\n            <Button\r\n              disabled={!recipeName || false}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              endIcon={<SaveIcon />}\r\n              onClick={handleSubmit}\r\n            >\r\n              {data.recipes.some((recipe) => recipe.name === recipeName)\r\n                ? \"Aktualizuj\"\r\n                : \"Dodaj\"}\r\n            </Button>\r\n            <RemoveDialog\r\n              isOpen={isDialogOpen}\r\n              toggler={dialogToggler}\r\n              onDelete={handleChipDelete}\r\n              title={\"Chcesz usunąć ten przepis?\"}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item sm={6} xs={12}>\r\n          {tempProducts.length > 0 && (\r\n            <Typography variant=\"caption\" gutterBottom>\r\n              Wpisz ilość produktów\r\n            </Typography>\r\n          )}\r\n          <Grid container>\r\n            {tempProducts.map((product) => (\r\n              <Grid item xs={6} key={product.id}>\r\n                <TextField\r\n                  key={product.id}\r\n                  label={product.name}\r\n                  id=\"standard-size-small\"\r\n                  size=\"small\"\r\n                  value={values[product.id] || \"\"}\r\n                  helperText={product.unit.name}\r\n                  onChange={(e) => handleProductValue(product, e)}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n      <Grid container className={classes.divider} spacing={3}>\r\n        <Grid item xs={12} sm={12}>\r\n          {data.recipes.map((recipe) => (\r\n            <Chip\r\n              className={classes.chip}\r\n              key={recipe.id}\r\n              label={recipe.name}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              onDelete={() => handleDialog(recipe.id)}\r\n              onClick={() => handleDisplayRecipe(recipe)}\r\n            />\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n","import { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    background: {\r\n      default: \"#F7F5F3\",\r\n    },\r\n    primary: {\r\n      main: \"#63264A\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Chip, Container, Grid, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport * as Constants from \"./constants\";\r\n\r\nexport default function Calendar() {\r\n  //\r\n  // Styles overrides\r\n  //\r\n  const useStyles = makeStyles((theme) => ({\r\n    divider: {\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(3),\r\n    },\r\n    chip: {\r\n      marginRight: theme.spacing(1),\r\n      marginBottom: theme.spacing(1),\r\n    },\r\n    section: {\r\n      margin: theme.spacing(3, 1, 1),\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  //\r\n  // States\r\n  //\r\n\r\n  //\r\n  // fetch\r\n  //\r\n  const { loading, error, data, refetch } = useQuery(Constants.calendar, {});\r\n  const [updateCalendar] = useMutation(Constants.updateCalendar);\r\n\r\n  if (loading) return \"Loading...\";\r\n  // if (error) return `Error! ${error}`;\r\n\r\n  //\r\n  // Handlers\r\n  //\r\n  const handleRecipeChip = (recipe) => {\r\n    console.log(recipe);\r\n    updateCalendar({\r\n      variables: {\r\n        recipeId: recipe.id,\r\n        isSelected: !recipe.isSelected,\r\n      },\r\n    });\r\n    // refetch();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h5\" gutterBottom className={classes.section}>\r\n        Zaznacz przepisy do kupienia\r\n      </Typography>\r\n\r\n      <Grid container spacing={3} className={classes.divider}>\r\n        <Grid item xs={12} sm={12}>\r\n          {/* Recipes CHIPS */}\r\n          {data.recipes.map((recipe) => (\r\n            <Chip\r\n              className={classes.chip}\r\n              key={recipe.id}\r\n              variant={recipe.isSelected ? \"default\" : \"outlined\"}\r\n              label={recipe.name}\r\n              color={recipe.isSelected ? \"primary\" : \"default\"}\r\n              onClick={() => handleRecipeChip(recipe)}\r\n            />\r\n          ))}\r\n          {/* Recipes CHIPS */}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Checkbox,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListSubheader,\r\n} from \"@material-ui/core\";\r\n\r\nexport default function BasketRecipes(props) {\r\n  const [recipesList, setRecipesList] = useState();\r\n\r\n  const handleCheckbox = (index, id, recipe) => {};\r\n\r\n  useEffect(() => {\r\n    setRecipesList(\r\n      props.recipes.map((recipe) => (\r\n        <div key={recipe.id}>\r\n          <List\r\n            dense\r\n            disablePadding={true}\r\n            subheader={<ListSubheader>{recipe.name}</ListSubheader>}\r\n          ></List>\r\n\r\n          {recipe.productsQuantity.map((item) => (\r\n            <ListItem key={item.id} role={undefined} button>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  edge=\"start\"\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  checked={item.isTaken}\r\n                  onClick={() =>\r\n                    props.onChange(\r\n                      item.id,\r\n                      recipe.id,\r\n                      item.isTaken,\r\n                      props.recipes.indexOf(recipe),\r\n                      recipe.productsQuantity.indexOf(item)\r\n                    )\r\n                  }\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                id={item.id}\r\n                primary={item.product.name}\r\n                secondary={item.value + \" \" + item.product.unit.name}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n        </div>\r\n      ))\r\n    );\r\n  }, [props.recipes]);\r\n\r\n  return (\r\n    <Grid item xs={12} sm={12}>\r\n      {recipesList}\r\n    </Grid>\r\n  );\r\n}\r\n","import {\r\n  Checkbox,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListSubheader,\r\n} from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport { groupBy } from \"lodash\";\r\nexport default function BasketCategories(props) {\r\n  const products = props.recipes;\r\n  //\r\n\r\n  //\r\n  // Take only products from recipes\r\n  //\r\n  const productsArray = products.flatMap((recipe) =>\r\n    recipe.productsQuantity.map((item) => ({\r\n      recipeIndex: products.indexOf(recipe),\r\n      productIndex: recipe.productsQuantity.indexOf(item),\r\n      recipeId: recipe.id,\r\n      productName: item.product.name,\r\n      productId: item.id,\r\n      productCategory: item.product.category.name,\r\n      isTaken: item.isTaken,\r\n      productUnit: item.product.unit.name,\r\n      productValue: item.value,\r\n    }))\r\n  );\r\n  // group products by category name\r\n\r\n  const grouped = groupBy(productsArray, (product) => product.productCategory);\r\n  // Prepare array of HTML to display with dynamic category name and products\r\n\r\n  const items = [];\r\n  for (const [key, value] of Object.entries(grouped)) {\r\n    items.push(\r\n      <>\r\n        <List\r\n          dense\r\n          disablePadding={true}\r\n          subheader={<ListSubheader>{key}</ListSubheader>}\r\n        ></List>\r\n        {value.map((product) => (\r\n          <ListItem key={product.productId} role={undefined} button>\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                tabIndex={-1}\r\n                disableRipple\r\n                checked={product.isTaken}\r\n                onClick={() =>\r\n                  props.onChange(\r\n                    product.productId,\r\n                    product.recipeId,\r\n                    product.isTaken,\r\n                    product.recipeIndex,\r\n                    product.productIndex\r\n                  )\r\n                }\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              id={product.productId}\r\n              primary={product.productName}\r\n              secondary={product.productValue + \" \" + product.productUnit}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <Grid item xs={12} sm={12}>\r\n      {items}\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Container, Grid, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport BasketRecipes from \"./BasketRecipes\";\r\nimport BasketCategories from \"./BasketCategories\";\r\nimport * as Constants from \"./constants\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  section: {\r\n    margin: theme.spacing(3, 1, 1),\r\n  },\r\n}));\r\n\r\nexport default function Basket() {\r\n  const classes = useStyles();\r\n  //\r\n  // States\r\n  //\r\n  const [units, setUnits] = useState([]);\r\n  const [isCategoryView, setIscategoryView] = useState(false);\r\n  //\r\n  // Pass units to child component to display unit and value\r\n  //\r\n  const itemUnit = (itemUnit) => {\r\n    return units\r\n      .filter((units) => units.id === itemUnit)\r\n      .map((unit) => unit.name);\r\n  };\r\n\r\n  //\r\n  // fetch\r\n  //\r\n  const { loading, error, data, refetch } = useQuery(Constants.productsQuery);\r\n  const [updateCheckbox] = useMutation(Constants.updateCheckbox);\r\n  useEffect(() => {\r\n    refetch();\r\n  }, []);\r\n  if (loading) return \"Loading...\";\r\n  if (error) return `Error! ${error}`;\r\n\r\n  //\r\n  // Pass sate changing function to child props\r\n  //\r\n  const handleRecipeChange = async (\r\n    productId,\r\n    recipeId,\r\n    isTaken,\r\n    recipeIndex,\r\n    productIndex\r\n  ) => {\r\n    // WORKING CATEGORIES FETCH\r\n    const changedProduct = { id: productId, isTaken: !isTaken };\r\n    const productsArray = data.recipes[recipeIndex].productsQuantity.map(\r\n      (product) => ({\r\n        id: product.id,\r\n        isTaken: product.isTaken,\r\n      })\r\n    );\r\n    productsArray[productIndex] = changedProduct;\r\n    await updateCheckbox({\r\n      variables: {\r\n        recipeId: recipeId,\r\n        productIds: productsArray,\r\n      },\r\n    });\r\n    await refetch();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {/* Check if recipes is empty - print string */}\r\n      <Typography\r\n        variant=\"h5\"\r\n        gutterBottom\r\n        className={classes.section}\r\n      ></Typography>\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={() => setIscategoryView(!isCategoryView)}\r\n      >\r\n        {isCategoryView ? \"Włącz widok kategorii\" : \"Włącz widok przepisów\"}\r\n      </Button>\r\n      <Grid container spacing={3}>\r\n        {isCategoryView ? (\r\n          <BasketRecipes\r\n            recipes={data.recipes}\r\n            itemUnit={itemUnit}\r\n            onChange={handleRecipeChange}\r\n          />\r\n        ) : (\r\n          <BasketCategories\r\n            recipes={data.recipes}\r\n            onChange={handleRecipeChange}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\n\r\nconst EXCHANGE_RATES = gql`\r\n  query {\r\n    recipes(where: { isSelected: true }) {\r\n      name\r\n      id\r\n      productsQuantity {\r\n        isTaken\r\n        value\r\n        id\r\n        product {\r\n          name\r\n          unit {\r\n            name\r\n          }\r\n          category {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Apollotest() {\r\n  const { loading, error, data } = useQuery(EXCHANGE_RATES);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  return (\r\n    <div>\r\n      {data.recipes.map((recipe) => (\r\n        <p>{recipe.id}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Appbar from \"./Appbar\";\r\nimport Products from \"./Products\";\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"fontsource-roboto\";\r\nimport Recipes from \"./Recipes\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { CssBaseline, Paper } from \"@material-ui/core\";\r\nimport theme from \"./Theme\";\r\nimport Calendar from \"./Calendar\";\r\nimport Basket from \"./Basket\";\r\nimport Apollotest from \"./Apollotest\";\r\nimport { ApolloProvider } from \"@apollo/client/react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nexport default function App() {\r\n  const client = new ApolloClient({\r\n    uri: \"https://obiadnik.herokuapp.com/graphql\",\r\n    cache: new InMemoryCache(),\r\n  });\r\n  return (\r\n    <>\r\n      <ApolloProvider client={client}>\r\n        <ThemeProvider theme={theme}>\r\n          <CssBaseline />\r\n          <Router basename={process.env.PUBLIC_URL}>\r\n            <Container maxWidth=\"md\" disableGutters={true}>\r\n              <Paper elevation={3}>\r\n                <Appbar />\r\n                <Switch>\r\n                  <Route exact path={[\"/products\", \"/\"]}>\r\n                    <Products />\r\n                  </Route>\r\n\r\n                  <Route path=\"/recipes\">\r\n                    <Recipes />\r\n                  </Route>\r\n                  <Route path=\"/calendar\">\r\n                    <Calendar />\r\n                  </Route>\r\n                  <Route path=\"/basket\">\r\n                    <Basket />\r\n                  </Route>\r\n                  <Route path=\"/apollo\">\r\n                    <Apollotest />\r\n                  </Route>\r\n                </Switch>\r\n              </Paper>\r\n            </Container>\r\n          </Router>\r\n        </ThemeProvider>\r\n      </ApolloProvider>\r\n    </>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}